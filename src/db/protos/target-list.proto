syntax = "proto3";

option go_package = "com/circadence/mars/target-list/api/protos";
package target_list;

service TargetList {
    rpc Create (CreateRequest) returns (Target);
    rpc Read (ReadRequest) returns (Target);
    rpc Query (QueryRequest) returns (QueryResponse);
    rpc Update (UpdateRequest) returns (Target);
    rpc Delete (DeleteRequest) returns (Target);
    rpc MassUpdate (MassUpdateRequest) returns (MassUpdateResponse);
    rpc MassDelete (MassDeleteRequest) returns (MassDeleteResponse);
    rpc GetTargetTypes (GetTargetTypesRequest) returns (GetTargetTypesResponse);
    rpc GetMatchingTargets (GetMatchingTargetsRequest) returns (GetMatchingTargetsResponse);
}

enum BroadcastAction {
    INDIVIDUAL = 0;
    MASS = 1;
    NONE = 2;
}

message CreateRequest {
    string acting_user_role = 1;
    Target data = 2;
    BroadcastAction broadcast_action = 3;
}

message ReadRequest {
    string acting_user_role = 1;
    string id = 2;
}

message QueryRequest {
    string acting_user_role = 1;
    QueryParams query_params = 2;
    int64 start_record = 3;
    int64 page_size = 4;
    SortParams sort_params = 5;
}

message UpdateRequest {
    string acting_user_role = 1;
    Target data = 2;
    BroadcastAction broadcast_action = 3;
}

message DeleteRequest {
    string acting_user_role = 1;
    string id = 2;
    BroadcastAction broadcast_action = 3;
}

message MassUpdateRequest {
    string acting_user_role = 1;
    QueryParams query_params = 2;
    UpdateParams update_params = 3;
}

message MassDeleteRequest {
    string acting_user_role = 1;
    QueryParams query_params = 2;
}

message MassDeleteResponse {
    int64 removed_count = 1;
}

message GetMatchingTargetsRequest {
    string acting_user_role = 1;
    Target data = 2;
    int64 start_record = 3;
    int64 page_size = 4;
}

message QueryParams {
    repeated TextFilter text_filters = 1;
    repeated DateFilter date_filters = 2;
    repeated BoolFilter bool_filters = 3;
    repeated string excluded_ids = 4;
}

message TextFilter {
    enum Operator {
        CONTAINS = 0;
        EQUALS = 1;
    }
    string field = 1;
    bool not = 2;
    Operator operator = 3;
    string value = 4;
}

message DateFilter {
    string field = 1;
    bool not = 2;
    int64 earliest_date_ms = 3;
    int64 latest_date_ms = 4;
}

message BoolFilter {
    string field = 1;
    bool value = 2;
}

message UpdateParams {
    repeated TextFieldUpdate text_fields = 1;
    repeated DateFieldUpdate date_fields = 2;
    repeated BoolFieldUpdate bool_fields = 3;
}

message TextFieldUpdate {
    string field = 1;
    string value = 2;
}

message DateFieldUpdate {
    string field = 1;
    int64 value = 2;
}

message BoolFieldUpdate {
    string field = 1;
    bool value = 2;
}

message QueryResponse {
    repeated Target results = 1;
    int64 start_record = 2;
    int64 total_records = 3;
}

message SortParams {
    enum Order {
        ASCENDING = 0;
        DESCENDING = 1;
    }
    string field = 1;
    Order order = 2;
}

message MassUpdateResponse {
    int64 updated_count = 1;
}

message GetTargetTypesRequest {
    string acting_user_role = 1;
}

message GetTargetTypesResponse {
    /* types will be one or more of the following:
        ipv4
        ipv6
        ethernet_mac
        wireless_mac
        bluetooth_mac
        fqdn
        netbios
        host_name
    */
    repeated string types = 1;
}

message GetMatchingTargetsResponse {
    repeated Target results = 1;
    int64 start_record = 2;
    int64 total_records = 3;
}

message Target {
    string id = 1;
    repeated string ipv4 = 2;
    repeated string ipv6 = 3;
    repeated Ethernet ethernet = 4;
    repeated Wireless wireless = 5;
    repeated Bluetooth bluetooth = 6;
    repeated OpenPort open_ports = 7;
    repeated Tool tools = 8;
    string host_name = 9;
    string fqdn = 10;
    string netbios_name = 11;
    string domain = 12;
    string os = 13;
    string os_version = 14;
    AccessState access_state = 15;
    ToolState tool_state = 16;
    BeaconState beacon_state = 17;
    ExfilState exfil_state = 18;
    EstablishedAccess established_access = 19;
    bool used_to_pivot = 20;
    TimeAttributes time_attributes = 21;
    string operator_notes = 22;
}

message Ethernet {
    string mac_address = 1;
    string manufacturer = 2;
}

message Wireless {
    string mac_address = 1;
    string manufacturer = 2;
    string frequency = 3;
    string channel = 4;
    string encryption_type = 5;
    string encryption_key = 6;
}

message Bluetooth {
    string mac_address = 1;
    string manufacturer = 2;
}

message OpenPort {
    string port_number = 1;
    string protocol = 2;
    string service = 3;
}

message Tool {
    string name = 1;
    string path = 2;
    string hash = 3;
    bool custom = 4;
    string installation_method = 5;
}

message EstablishedAccess {
    string type = 1;
    string port_and_protocol = 2;
    string privilege_level_attained = 3;
}

message TimeAttributes {
    int64 discovered = 1;
    int64 first_access = 2;
    int64 lost_access = 3;
    int64 last_activity = 4;
}

message AccessState {
    enum State {
        ACTIVE = 0;
        VACATED = 1;
        NO_ACCESS_ATTEMPTED = 2;
        LOST_ACCESS_DECONFLICTED = 3;
        LOST_ACCESS_UNKNOWN = 4;
    }
    State state = 1;
}

message ToolState {
    enum State {
        NA = 0;
        ACTIVE = 1;
        INACTIVE_BUT_IMPLANTED = 2;
        REMOVED_BY_PCO = 3;
        REMOVED_BY_CND = 4;
        UNKNOWN = 5;
    }
    State state = 1;
}

message BeaconState {
    enum State {
        NA = 0;
        ACTIVE = 1;
        INACTIVE_BUT_IMPLANTED = 2;
        REMOVED_BY_PCO = 3;
        REMOVED_BY_CND = 4;
        UNKNOWN = 5;
    }
    State state = 1;
}

message ExfilState {
    enum State {
        ACTIVE = 0;
        INACTIVE = 1;
        STOPPED_BY_CND = 2;
    }
    State state = 1;
}
